// Generated by Dagger (https://google.github.io/dagger).
package com.quran.labs.androidquran.component.application;

import android.view.Display;
import com.quran.data.page.provider.QuranPageModule;
import com.quran.data.page.provider.QuranPageModule_ProvideImageDrawHelpersFactory;
import com.quran.data.page.provider.QuranPageModule_ProvideMadaniPageSetFactory;
import com.quran.data.source.DisplaySize;
import com.quran.data.source.PageProvider;
import com.quran.data.source.PageSizeCalculator;
import com.quran.labs.androidquran.QuranDataActivity;
import com.quran.labs.androidquran.QuranDataActivity_MembersInjector;
import com.quran.labs.androidquran.QuranForwarderActivity;
import com.quran.labs.androidquran.QuranForwarderActivity_MembersInjector;
import com.quran.labs.androidquran.QuranImportActivity;
import com.quran.labs.androidquran.QuranImportActivity_MembersInjector;
import com.quran.labs.androidquran.SearchActivity;
import com.quran.labs.androidquran.SearchActivity_MembersInjector;
import com.quran.labs.androidquran.component.activity.PagerActivityComponent;
import com.quran.labs.androidquran.component.fragment.QuranPageComponent;
import com.quran.labs.androidquran.data.AyahInfoDatabaseProvider;
import com.quran.labs.androidquran.data.AyahInfoDatabaseProvider_Factory;
import com.quran.labs.androidquran.data.QuranDataModule;
import com.quran.labs.androidquran.data.QuranDataModule_ProvideQuranPageProviderFactory;
import com.quran.labs.androidquran.data.QuranDataProvider;
import com.quran.labs.androidquran.data.QuranDataProvider_MembersInjector;
import com.quran.labs.androidquran.data.QuranInfo;
import com.quran.labs.androidquran.data.QuranInfo_Factory;
import com.quran.labs.androidquran.database.BookmarksDBAdapter;
import com.quran.labs.androidquran.database.TranslationsDBAdapter;
import com.quran.labs.androidquran.database.TranslationsDBAdapter_Factory;
import com.quran.labs.androidquran.database.TranslationsDBHelper_Factory;
import com.quran.labs.androidquran.model.bookmark.BookmarkImportExportModel;
import com.quran.labs.androidquran.model.bookmark.BookmarkImportExportModel_Factory;
import com.quran.labs.androidquran.model.bookmark.BookmarkJsonModel_Factory;
import com.quran.labs.androidquran.model.bookmark.BookmarkModel;
import com.quran.labs.androidquran.model.bookmark.BookmarkModel_Factory;
import com.quran.labs.androidquran.model.bookmark.RecentPageModel;
import com.quran.labs.androidquran.model.bookmark.RecentPageModel_Factory;
import com.quran.labs.androidquran.model.quran.CoordinatesModel;
import com.quran.labs.androidquran.model.quran.CoordinatesModel_Factory;
import com.quran.labs.androidquran.model.translation.ArabicDatabaseUtils;
import com.quran.labs.androidquran.model.translation.ArabicDatabaseUtils_Factory;
import com.quran.labs.androidquran.model.translation.TranslationModel;
import com.quran.labs.androidquran.model.translation.TranslationModel_Factory;
import com.quran.labs.androidquran.module.activity.PagerActivityModule;
import com.quran.labs.androidquran.module.activity.PagerActivityModule_ProvideAyahSelectedListenerFactory;
import com.quran.labs.androidquran.module.activity.PagerActivityModule_ProvideImageWidthFactory;
import com.quran.labs.androidquran.module.application.ApplicationModule;
import com.quran.labs.androidquran.module.application.ApplicationModule_ProvideApplicationContextFactory;
import com.quran.labs.androidquran.module.application.ApplicationModule_ProvideDisplayFactory;
import com.quran.labs.androidquran.module.application.ApplicationModule_ProvideDisplaySizeFactory;
import com.quran.labs.androidquran.module.application.ApplicationModule_ProvideMainThreadSchedulerFactory;
import com.quran.labs.androidquran.module.application.ApplicationModule_ProvideQuranPageSizeCalculatorFactory;
import com.quran.labs.androidquran.module.application.ApplicationModule_ProvideQuranSettingsFactory;
import com.quran.labs.androidquran.module.application.DatabaseModule;
import com.quran.labs.androidquran.module.application.DatabaseModule_ProvideBookmarkDatabaseAdapterFactory;
import com.quran.labs.androidquran.module.application.NetworkModule;
import com.quran.labs.androidquran.module.application.NetworkModule_ProvideOkHttpClientFactory;
import com.quran.labs.androidquran.module.fragment.QuranPageModule_ProvidePagesFactory;
import com.quran.labs.androidquran.pageselect.PageSelectActivity;
import com.quran.labs.androidquran.pageselect.PageSelectActivity_MembersInjector;
import com.quran.labs.androidquran.pageselect.PageSelectPresenter;
import com.quran.labs.androidquran.pageselect.PageSelectPresenter_Factory;
import com.quran.labs.androidquran.presenter.QuranImportPresenter;
import com.quran.labs.androidquran.presenter.QuranImportPresenter_Factory;
import com.quran.labs.androidquran.presenter.bookmark.AddTagDialogPresenter;
import com.quran.labs.androidquran.presenter.bookmark.BookmarkPresenter;
import com.quran.labs.androidquran.presenter.bookmark.BookmarkPresenter_Factory;
import com.quran.labs.androidquran.presenter.bookmark.BookmarksContextualModePresenter;
import com.quran.labs.androidquran.presenter.bookmark.BookmarksContextualModePresenter_Factory;
import com.quran.labs.androidquran.presenter.bookmark.RecentPagePresenter;
import com.quran.labs.androidquran.presenter.bookmark.RecentPagePresenter_Factory;
import com.quran.labs.androidquran.presenter.bookmark.TagBookmarkPresenter;
import com.quran.labs.androidquran.presenter.bookmark.TagBookmarkPresenter_Factory;
import com.quran.labs.androidquran.presenter.quran.QuranPagePresenter;
import com.quran.labs.androidquran.presenter.quran.QuranPagePresenter_Factory;
import com.quran.labs.androidquran.presenter.quran.ayahtracker.AyahTrackerPresenter;
import com.quran.labs.androidquran.presenter.quran.ayahtracker.AyahTrackerPresenter_Factory;
import com.quran.labs.androidquran.presenter.translation.InlineTranslationPresenter;
import com.quran.labs.androidquran.presenter.translation.InlineTranslationPresenter_Factory;
import com.quran.labs.androidquran.presenter.translation.TranslationManagerPresenter;
import com.quran.labs.androidquran.presenter.translation.TranslationManagerPresenter_Factory;
import com.quran.labs.androidquran.presenter.translation.TranslationPresenter;
import com.quran.labs.androidquran.presenter.translation.TranslationPresenter_Factory;
import com.quran.labs.androidquran.service.AudioService;
import com.quran.labs.androidquran.service.AudioService_MembersInjector;
import com.quran.labs.androidquran.service.QuranDownloadService;
import com.quran.labs.androidquran.service.QuranDownloadService_MembersInjector;
import com.quran.labs.androidquran.ui.AudioManagerActivity;
import com.quran.labs.androidquran.ui.AudioManagerActivity_MembersInjector;
import com.quran.labs.androidquran.ui.PagerActivity;
import com.quran.labs.androidquran.ui.PagerActivity_MembersInjector;
import com.quran.labs.androidquran.ui.QuranActivity;
import com.quran.labs.androidquran.ui.QuranActivity_MembersInjector;
import com.quran.labs.androidquran.ui.TranslationManagerActivity;
import com.quran.labs.androidquran.ui.TranslationManagerActivity_MembersInjector;
import com.quran.labs.androidquran.ui.fragment.AddTagDialog;
import com.quran.labs.androidquran.ui.fragment.AddTagDialog_MembersInjector;
import com.quran.labs.androidquran.ui.fragment.AyahPlaybackFragment;
import com.quran.labs.androidquran.ui.fragment.AyahPlaybackFragment_MembersInjector;
import com.quran.labs.androidquran.ui.fragment.AyahTranslationFragment;
import com.quran.labs.androidquran.ui.fragment.AyahTranslationFragment_MembersInjector;
import com.quran.labs.androidquran.ui.fragment.BookmarksFragment;
import com.quran.labs.androidquran.ui.fragment.BookmarksFragment_MembersInjector;
import com.quran.labs.androidquran.ui.fragment.JumpFragment;
import com.quran.labs.androidquran.ui.fragment.JumpFragment_MembersInjector;
import com.quran.labs.androidquran.ui.fragment.JuzListFragment;
import com.quran.labs.androidquran.ui.fragment.JuzListFragment_MembersInjector;
import com.quran.labs.androidquran.ui.fragment.QuranAdvancedSettingsFragment;
import com.quran.labs.androidquran.ui.fragment.QuranAdvancedSettingsFragment_MembersInjector;
import com.quran.labs.androidquran.ui.fragment.QuranPageFragment;
import com.quran.labs.androidquran.ui.fragment.QuranPageFragment_MembersInjector;
import com.quran.labs.androidquran.ui.fragment.QuranSettingsFragment;
import com.quran.labs.androidquran.ui.fragment.QuranSettingsFragment_MembersInjector;
import com.quran.labs.androidquran.ui.fragment.SuraListFragment;
import com.quran.labs.androidquran.ui.fragment.SuraListFragment_MembersInjector;
import com.quran.labs.androidquran.ui.fragment.TabletFragment;
import com.quran.labs.androidquran.ui.fragment.TabletFragment_MembersInjector;
import com.quran.labs.androidquran.ui.fragment.TagBookmarkDialog;
import com.quran.labs.androidquran.ui.fragment.TagBookmarkDialog_MembersInjector;
import com.quran.labs.androidquran.ui.fragment.TranslationFragment;
import com.quran.labs.androidquran.ui.fragment.TranslationFragment_MembersInjector;
import com.quran.labs.androidquran.ui.helpers.QuranPageWorker;
import com.quran.labs.androidquran.ui.helpers.QuranPageWorker_Factory;
import com.quran.labs.androidquran.ui.helpers.QuranRowFactory;
import com.quran.labs.androidquran.ui.helpers.QuranRowFactory_Factory;
import com.quran.labs.androidquran.util.AudioUtils;
import com.quran.labs.androidquran.util.AudioUtils_Factory;
import com.quran.labs.androidquran.util.ImageUtil_Factory;
import com.quran.labs.androidquran.util.QuranAppUtils;
import com.quran.labs.androidquran.util.QuranAppUtils_Factory;
import com.quran.labs.androidquran.util.QuranFileUtils;
import com.quran.labs.androidquran.util.QuranFileUtils_Factory;
import com.quran.labs.androidquran.util.QuranScreenInfo;
import com.quran.labs.androidquran.util.QuranScreenInfo_Factory;
import com.quran.labs.androidquran.util.QuranSettings;
import com.quran.labs.androidquran.util.ShareUtil;
import com.quran.labs.androidquran.util.ShareUtil_Factory;
import com.quran.page.common.draw.ImageDrawHelper;
import dagger.internal.DoubleCheck;
import dagger.internal.MapFactory;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import dagger.internal.SingleCheck;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private ApplicationModule applicationModule;

  private Provider<QuranSettings> provideQuranSettingsProvider;

  private ApplicationModule_ProvideApplicationContextFactory provideApplicationContextProvider;

  @SuppressWarnings("rawtypes")
  private Provider translationsDBHelperProvider;

  private Provider<Map<String, PageProvider>> mapOfStringAndPageProvider;

  private QuranDataModule_ProvideQuranPageProviderFactory provideQuranPageProvider;

  private ApplicationModule_ProvideDisplayFactory provideDisplayProvider;

  private ApplicationModule_ProvideDisplaySizeFactory provideDisplaySizeProvider;

  private ApplicationModule_ProvideQuranPageSizeCalculatorFactory
      provideQuranPageSizeCalculatorProvider;

  private QuranScreenInfo_Factory quranScreenInfoProvider;

  private QuranFileUtils_Factory quranFileUtilsProvider;

  private Provider<TranslationsDBAdapter> translationsDBAdapterProvider;

  private QuranInfo_Factory quranInfoProvider;

  private Provider<AudioUtils> audioUtilsProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<BookmarksDBAdapter> provideBookmarkDatabaseAdapterProvider;

  private Provider<RecentPageModel> recentPageModelProvider;

  private Provider<TranslationManagerPresenter> translationManagerPresenterProvider;

  private Provider<BookmarkModel> bookmarkModelProvider;

  private BookmarkImportExportModel_Factory bookmarkImportExportModelProvider;

  private Provider<QuranImportPresenter> quranImportPresenterProvider;

  private ImageUtil_Factory imageUtilProvider;

  private ApplicationModule_ProvideMainThreadSchedulerFactory provideMainThreadSchedulerProvider;

  private Provider<PageSelectPresenter> pageSelectPresenterProvider;

  private Provider<ArabicDatabaseUtils> arabicDatabaseUtilsProvider;

  private Provider<QuranRowFactory> quranRowFactoryProvider;

  private Provider<BookmarkPresenter> bookmarkPresenterProvider;

  private Provider<BookmarksContextualModePresenter> bookmarksContextualModePresenterProvider;

  private Provider<TagBookmarkPresenter> tagBookmarkPresenterProvider;

  private DaggerApplicationComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Map<String, PageProvider> getMapOfStringAndPageProvider() {
    return Collections.<String, PageProvider>singletonMap(
        "madani", QuranPageModule_ProvideMadaniPageSetFactory.proxyProvideMadaniPageSet());
  }

  private PageProvider getPageProvider() {
    return QuranDataModule_ProvideQuranPageProviderFactory.proxyProvideQuranPageProvider(
        getMapOfStringAndPageProvider(), provideQuranSettingsProvider.get());
  }

  private QuranInfo getQuranInfo() {
    return new QuranInfo(getPageProvider());
  }

  private Display getDisplay() {
    return ApplicationModule_ProvideDisplayFactory.proxyProvideDisplay(
        applicationModule,
        ApplicationModule_ProvideApplicationContextFactory.proxyProvideApplicationContext(
            applicationModule));
  }

  private DisplaySize getDisplaySize() {
    return ApplicationModule_ProvideDisplaySizeFactory.proxyProvideDisplaySize(
        applicationModule, getDisplay());
  }

  private PageSizeCalculator getPageSizeCalculator() {
    return ApplicationModule_ProvideQuranPageSizeCalculatorFactory
        .proxyProvideQuranPageSizeCalculator(
            applicationModule, getPageProvider(), getDisplaySize());
  }

  private QuranScreenInfo getQuranScreenInfo() {
    return new QuranScreenInfo(
        ApplicationModule_ProvideApplicationContextFactory.proxyProvideApplicationContext(
            applicationModule),
        getDisplay(),
        getPageSizeCalculator());
  }

  private QuranFileUtils getQuranFileUtils() {
    return new QuranFileUtils(
        ApplicationModule_ProvideApplicationContextFactory.proxyProvideApplicationContext(
            applicationModule),
        getPageProvider(),
        getQuranScreenInfo());
  }

  private BookmarkImportExportModel getBookmarkImportExportModel() {
    return BookmarkImportExportModel_Factory.newBookmarkImportExportModel(
        ApplicationModule_ProvideApplicationContextFactory.proxyProvideApplicationContext(
            applicationModule),
        BookmarkJsonModel_Factory.newBookmarkJsonModel(),
        bookmarkModelProvider.get());
  }

  private AddTagDialogPresenter getAddTagDialogPresenter() {
    return new AddTagDialogPresenter(bookmarkModelProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideQuranSettingsProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideQuranSettingsFactory.create(builder.applicationModule));
    this.provideApplicationContextProvider =
        ApplicationModule_ProvideApplicationContextFactory.create(builder.applicationModule);
    this.translationsDBHelperProvider =
        DoubleCheck.provider(
            TranslationsDBHelper_Factory.create(provideApplicationContextProvider));
    this.mapOfStringAndPageProvider =
        MapFactory.<String, PageProvider>builder(1)
            .put("madani", QuranPageModule_ProvideMadaniPageSetFactory.create())
            .build();
    this.provideQuranPageProvider =
        QuranDataModule_ProvideQuranPageProviderFactory.create(
            mapOfStringAndPageProvider, provideQuranSettingsProvider);
    this.provideDisplayProvider =
        ApplicationModule_ProvideDisplayFactory.create(
            builder.applicationModule, provideApplicationContextProvider);
    this.provideDisplaySizeProvider =
        ApplicationModule_ProvideDisplaySizeFactory.create(
            builder.applicationModule, provideDisplayProvider);
    this.provideQuranPageSizeCalculatorProvider =
        ApplicationModule_ProvideQuranPageSizeCalculatorFactory.create(
            builder.applicationModule, provideQuranPageProvider, provideDisplaySizeProvider);
    this.quranScreenInfoProvider =
        QuranScreenInfo_Factory.create(
            provideApplicationContextProvider,
            provideDisplayProvider,
            provideQuranPageSizeCalculatorProvider);
    this.quranFileUtilsProvider =
        QuranFileUtils_Factory.create(
            provideApplicationContextProvider, provideQuranPageProvider, quranScreenInfoProvider);
    this.translationsDBAdapterProvider =
        DoubleCheck.provider(
            TranslationsDBAdapter_Factory.create(
                provideApplicationContextProvider,
                translationsDBHelperProvider,
                quranFileUtilsProvider));
    this.applicationModule = builder.applicationModule;
    this.quranInfoProvider = QuranInfo_Factory.create(provideQuranPageProvider);
    this.audioUtilsProvider =
        SingleCheck.provider(AudioUtils_Factory.create(quranInfoProvider, quranFileUtilsProvider));
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(NetworkModule_ProvideOkHttpClientFactory.create());
    this.provideBookmarkDatabaseAdapterProvider =
        DoubleCheck.provider(
            DatabaseModule_ProvideBookmarkDatabaseAdapterFactory.create(
                provideApplicationContextProvider, quranInfoProvider));
    this.recentPageModelProvider =
        DoubleCheck.provider(
            RecentPageModel_Factory.create(provideBookmarkDatabaseAdapterProvider));
    this.translationManagerPresenterProvider =
        DoubleCheck.provider(
            TranslationManagerPresenter_Factory.create(
                provideApplicationContextProvider,
                provideOkHttpClientProvider,
                provideQuranSettingsProvider,
                translationsDBAdapterProvider,
                quranFileUtilsProvider));
    this.bookmarkModelProvider =
        DoubleCheck.provider(
            BookmarkModel_Factory.create(
                provideBookmarkDatabaseAdapterProvider, recentPageModelProvider));
    this.bookmarkImportExportModelProvider =
        BookmarkImportExportModel_Factory.create(
            provideApplicationContextProvider,
            BookmarkJsonModel_Factory.create(),
            bookmarkModelProvider);
    this.quranImportPresenterProvider =
        DoubleCheck.provider(
            QuranImportPresenter_Factory.create(
                provideApplicationContextProvider,
                bookmarkImportExportModelProvider,
                bookmarkModelProvider));
    this.imageUtilProvider = ImageUtil_Factory.create(provideOkHttpClientProvider);
    this.provideMainThreadSchedulerProvider =
        ApplicationModule_ProvideMainThreadSchedulerFactory.create(builder.applicationModule);
    this.pageSelectPresenterProvider =
        SingleCheck.provider(
            PageSelectPresenter_Factory.create(
                imageUtilProvider,
                quranFileUtilsProvider,
                provideMainThreadSchedulerProvider,
                mapOfStringAndPageProvider));
    this.arabicDatabaseUtilsProvider =
        DoubleCheck.provider(
            ArabicDatabaseUtils_Factory.create(
                provideApplicationContextProvider, quranInfoProvider, quranFileUtilsProvider));
    this.quranRowFactoryProvider =
        SingleCheck.provider(QuranRowFactory_Factory.create(quranInfoProvider));
    this.bookmarkPresenterProvider =
        DoubleCheck.provider(
            BookmarkPresenter_Factory.create(
                provideApplicationContextProvider,
                bookmarkModelProvider,
                provideQuranSettingsProvider,
                arabicDatabaseUtilsProvider,
                quranRowFactoryProvider,
                quranInfoProvider));
    this.bookmarksContextualModePresenterProvider =
        DoubleCheck.provider(BookmarksContextualModePresenter_Factory.create());
    this.tagBookmarkPresenterProvider =
        DoubleCheck.provider(TagBookmarkPresenter_Factory.create(bookmarkModelProvider));
  }

  @Override
  public PagerActivityComponent.Builder pagerActivityComponentBuilder() {
    return new PagerActivityComponentBuilder();
  }

  @Override
  public void inject(QuranDataProvider quranDataProvider) {
    injectQuranDataProvider(quranDataProvider);
  }

  @Override
  public void inject(AudioService audioService) {
    injectAudioService(audioService);
  }

  @Override
  public void inject(QuranDownloadService quranDownloadService) {
    injectQuranDownloadService(quranDownloadService);
  }

  @Override
  public void inject(QuranActivity quranActivity) {
    injectQuranActivity(quranActivity);
  }

  @Override
  public void inject(QuranDataActivity quranDataActivity) {
    injectQuranDataActivity(quranDataActivity);
  }

  @Override
  public void inject(QuranImportActivity quranImportActivity) {
    injectQuranImportActivity(quranImportActivity);
  }

  @Override
  public void inject(AudioManagerActivity audioManagerActivity) {
    injectAudioManagerActivity(audioManagerActivity);
  }

  @Override
  public void inject(QuranForwarderActivity quranForwarderActivity) {
    injectQuranForwarderActivity(quranForwarderActivity);
  }

  @Override
  public void inject(SearchActivity searchActivity) {
    injectSearchActivity(searchActivity);
  }

  @Override
  public void inject(PageSelectActivity pageSelectActivity) {
    injectPageSelectActivity(pageSelectActivity);
  }

  @Override
  public void inject(BookmarksFragment bookmarksFragment) {
    injectBookmarksFragment(bookmarksFragment);
  }

  @Override
  public void inject(QuranSettingsFragment fragment) {
    injectQuranSettingsFragment(fragment);
  }

  @Override
  public void inject(TranslationManagerActivity translationManagerActivity) {
    injectTranslationManagerActivity(translationManagerActivity);
  }

  @Override
  public void inject(QuranAdvancedSettingsFragment quranAdvancedSettingsFragment) {
    injectQuranAdvancedSettingsFragment(quranAdvancedSettingsFragment);
  }

  @Override
  public void inject(SuraListFragment suraListFragment) {
    injectSuraListFragment(suraListFragment);
  }

  @Override
  public void inject(JuzListFragment juzListFragment) {
    injectJuzListFragment(juzListFragment);
  }

  @Override
  public void inject(AyahPlaybackFragment ayahPlaybackFragment) {
    injectAyahPlaybackFragment(ayahPlaybackFragment);
  }

  @Override
  public void inject(JumpFragment jumpFragment) {
    injectJumpFragment(jumpFragment);
  }

  @Override
  public void inject(TagBookmarkDialog tagBookmarkDialog) {
    injectTagBookmarkDialog(tagBookmarkDialog);
  }

  @Override
  public void inject(AddTagDialog addTagDialog) {
    injectAddTagDialog(addTagDialog);
  }

  private QuranDataProvider injectQuranDataProvider(QuranDataProvider instance) {
    QuranDataProvider_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    QuranDataProvider_MembersInjector.injectTranslationsDBAdapter(
        instance, translationsDBAdapterProvider.get());
    QuranDataProvider_MembersInjector.injectQuranFileUtils(instance, getQuranFileUtils());
    return instance;
  }

  private AudioService injectAudioService(AudioService instance) {
    AudioService_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    AudioService_MembersInjector.injectAudioUtils(instance, audioUtilsProvider.get());
    return instance;
  }

  private QuranDownloadService injectQuranDownloadService(QuranDownloadService instance) {
    QuranDownloadService_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    QuranDownloadService_MembersInjector.injectOkHttpClient(
        instance, provideOkHttpClientProvider.get());
    return instance;
  }

  private QuranActivity injectQuranActivity(QuranActivity instance) {
    QuranActivity_MembersInjector.injectAudioUtils(instance, audioUtilsProvider.get());
    QuranActivity_MembersInjector.injectRecentPageModel(instance, recentPageModelProvider.get());
    QuranActivity_MembersInjector.injectTranslationManagerPresenter(
        instance, translationManagerPresenterProvider.get());
    return instance;
  }

  private QuranDataActivity injectQuranDataActivity(QuranDataActivity instance) {
    QuranDataActivity_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    QuranDataActivity_MembersInjector.injectQuranFileUtils(instance, getQuranFileUtils());
    QuranDataActivity_MembersInjector.injectQuranScreenInfo(instance, getQuranScreenInfo());
    QuranDataActivity_MembersInjector.injectQuranPageProvider(instance, getPageProvider());
    return instance;
  }

  private QuranImportActivity injectQuranImportActivity(QuranImportActivity instance) {
    QuranImportActivity_MembersInjector.injectMPresenter(
        instance, quranImportPresenterProvider.get());
    return instance;
  }

  private AudioManagerActivity injectAudioManagerActivity(AudioManagerActivity instance) {
    AudioManagerActivity_MembersInjector.injectAudioUtils(instance, audioUtilsProvider.get());
    AudioManagerActivity_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    AudioManagerActivity_MembersInjector.injectQuranFileUtils(instance, getQuranFileUtils());
    return instance;
  }

  private QuranForwarderActivity injectQuranForwarderActivity(QuranForwarderActivity instance) {
    QuranForwarderActivity_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    return instance;
  }

  private SearchActivity injectSearchActivity(SearchActivity instance) {
    SearchActivity_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    SearchActivity_MembersInjector.injectQuranFileUtils(instance, getQuranFileUtils());
    return instance;
  }

  private PageSelectActivity injectPageSelectActivity(PageSelectActivity instance) {
    PageSelectActivity_MembersInjector.injectPresenter(instance, pageSelectPresenterProvider.get());
    PageSelectActivity_MembersInjector.injectQuranSettings(
        instance, provideQuranSettingsProvider.get());
    return instance;
  }

  private BookmarksFragment injectBookmarksFragment(BookmarksFragment instance) {
    BookmarksFragment_MembersInjector.injectBookmarkPresenter(
        instance, bookmarkPresenterProvider.get());
    BookmarksFragment_MembersInjector.injectBookmarksContextualModePresenter(
        instance, bookmarksContextualModePresenterProvider.get());
    return instance;
  }

  private QuranSettingsFragment injectQuranSettingsFragment(QuranSettingsFragment instance) {
    QuranSettingsFragment_MembersInjector.injectPageTypes(
        instance, getMapOfStringAndPageProvider());
    return instance;
  }

  private TranslationManagerActivity injectTranslationManagerActivity(
      TranslationManagerActivity instance) {
    TranslationManagerActivity_MembersInjector.injectPresenter(
        instance, translationManagerPresenterProvider.get());
    TranslationManagerActivity_MembersInjector.injectQuranFileUtils(instance, getQuranFileUtils());
    return instance;
  }

  private QuranAdvancedSettingsFragment injectQuranAdvancedSettingsFragment(
      QuranAdvancedSettingsFragment instance) {
    QuranAdvancedSettingsFragment_MembersInjector.injectBookmarkImportExportModel(
        instance, getBookmarkImportExportModel());
    QuranAdvancedSettingsFragment_MembersInjector.injectQuranFileUtils(
        instance, getQuranFileUtils());
    QuranAdvancedSettingsFragment_MembersInjector.injectQuranScreenInfo(
        instance, getQuranScreenInfo());
    return instance;
  }

  private SuraListFragment injectSuraListFragment(SuraListFragment instance) {
    SuraListFragment_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    return instance;
  }

  private JuzListFragment injectJuzListFragment(JuzListFragment instance) {
    JuzListFragment_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    return instance;
  }

  private AyahPlaybackFragment injectAyahPlaybackFragment(AyahPlaybackFragment instance) {
    AyahPlaybackFragment_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    return instance;
  }

  private JumpFragment injectJumpFragment(JumpFragment instance) {
    JumpFragment_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    return instance;
  }

  private TagBookmarkDialog injectTagBookmarkDialog(TagBookmarkDialog instance) {
    TagBookmarkDialog_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    TagBookmarkDialog_MembersInjector.injectMTagBookmarkPresenter(
        instance, tagBookmarkPresenterProvider.get());
    return instance;
  }

  private AddTagDialog injectAddTagDialog(AddTagDialog instance) {
    AddTagDialog_MembersInjector.injectAddTagDialogPresenter(instance, getAddTagDialogPresenter());
    return instance;
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private Builder() {}

    public ApplicationComponent build() {
      if (applicationModule == null) {
        throw new IllegalStateException(
            ApplicationModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerApplicationComponent(this);
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This
     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder databaseModule(DatabaseModule databaseModule) {
      Preconditions.checkNotNull(databaseModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This
     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This
     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder quranDataModule(QuranDataModule quranDataModule) {
      Preconditions.checkNotNull(quranDataModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This
     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder quranPageModule(QuranPageModule quranPageModule) {
      Preconditions.checkNotNull(quranPageModule);
      return this;
    }
  }

  private final class PagerActivityComponentBuilder implements PagerActivityComponent.Builder {
    private PagerActivityModule pagerActivityModule;

    @Override
    public PagerActivityComponent build() {
      if (pagerActivityModule == null) {
        throw new IllegalStateException(
            PagerActivityModule.class.getCanonicalName() + " must be set");
      }
      return new PagerActivityComponentImpl(this);
    }

    @Override
    public PagerActivityComponentBuilder withPagerActivityModule(PagerActivityModule pagerModule) {
      this.pagerActivityModule = Preconditions.checkNotNull(pagerModule);
      return this;
    }
  }

  private final class PagerActivityComponentImpl implements PagerActivityComponent {
    private PagerActivityModule pagerActivityModule;

    private Provider<String> provideImageWidthProvider;

    private Provider<QuranPageWorker> quranPageWorkerProvider;

    private Provider<RecentPagePresenter> recentPagePresenterProvider;

    private Provider<AyahInfoDatabaseProvider> ayahInfoDatabaseProvider;

    private Provider<QuranAppUtils> quranAppUtilsProvider;

    private Provider<ShareUtil> shareUtilProvider;

    private Provider<TranslationModel> translationModelProvider;

    private Provider<CoordinatesModel> coordinatesModelProvider;

    private PagerActivityComponentImpl(PagerActivityComponentBuilder builder) {
      initialize(builder);
    }

    private InlineTranslationPresenter getInlineTranslationPresenter() {
      return InlineTranslationPresenter_Factory.newInlineTranslationPresenter(
          translationModelProvider.get(),
          DaggerApplicationComponent.this.translationsDBAdapterProvider.get(),
          DaggerApplicationComponent.this.provideQuranSettingsProvider.get(),
          DaggerApplicationComponent.this.getQuranInfo());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PagerActivityComponentBuilder builder) {
      this.provideImageWidthProvider =
          DoubleCheck.provider(
              PagerActivityModule_ProvideImageWidthFactory.create(
                  builder.pagerActivityModule,
                  DaggerApplicationComponent.this.quranScreenInfoProvider));
      this.quranPageWorkerProvider =
          DoubleCheck.provider(
              QuranPageWorker_Factory.create(
                  DaggerApplicationComponent.this.provideApplicationContextProvider,
                  DaggerApplicationComponent.this.provideOkHttpClientProvider,
                  provideImageWidthProvider,
                  DaggerApplicationComponent.this.quranScreenInfoProvider,
                  DaggerApplicationComponent.this.quranFileUtilsProvider));
      this.recentPagePresenterProvider =
          DoubleCheck.provider(
              RecentPagePresenter_Factory.create(
                  DaggerApplicationComponent.this.recentPageModelProvider));
      this.ayahInfoDatabaseProvider =
          DoubleCheck.provider(
              AyahInfoDatabaseProvider_Factory.create(
                  DaggerApplicationComponent.this.provideApplicationContextProvider,
                  provideImageWidthProvider,
                  DaggerApplicationComponent.this.quranFileUtilsProvider));
      this.quranAppUtilsProvider =
          SingleCheck.provider(
              QuranAppUtils_Factory.create(DaggerApplicationComponent.this.quranInfoProvider));
      this.shareUtilProvider =
          SingleCheck.provider(
              ShareUtil_Factory.create(DaggerApplicationComponent.this.quranInfoProvider));
      this.translationModelProvider =
          DoubleCheck.provider(
              TranslationModel_Factory.create(
                  DaggerApplicationComponent.this.provideApplicationContextProvider,
                  DaggerApplicationComponent.this.quranFileUtilsProvider));
      this.coordinatesModelProvider =
          DoubleCheck.provider(CoordinatesModel_Factory.create(ayahInfoDatabaseProvider));
      this.pagerActivityModule = builder.pagerActivityModule;
    }

    @Override
    public QuranPageComponent.Builder quranPageComponentBuilder() {
      return new QuranPageComponentBuilder();
    }

    @Override
    public void inject(PagerActivity pagerActivity) {
      injectPagerActivity(pagerActivity);
    }

    @Override
    public void inject(AyahTranslationFragment ayahTranslationFragment) {
      injectAyahTranslationFragment(ayahTranslationFragment);
    }

    private PagerActivity injectPagerActivity(PagerActivity instance) {
      PagerActivity_MembersInjector.injectQuranPageWorker(instance, quranPageWorkerProvider.get());
      PagerActivity_MembersInjector.injectBookmarkModel(
          instance, DaggerApplicationComponent.this.bookmarkModelProvider.get());
      PagerActivity_MembersInjector.injectRecentPagePresenter(
          instance, recentPagePresenterProvider.get());
      PagerActivity_MembersInjector.injectAyahInfoDatabaseProvider(
          instance, ayahInfoDatabaseProvider.get());
      PagerActivity_MembersInjector.injectQuranSettings(
          instance, DaggerApplicationComponent.this.provideQuranSettingsProvider.get());
      PagerActivity_MembersInjector.injectQuranScreenInfo(
          instance, DaggerApplicationComponent.this.getQuranScreenInfo());
      PagerActivity_MembersInjector.injectArabicDatabaseUtils(
          instance, DaggerApplicationComponent.this.arabicDatabaseUtilsProvider.get());
      PagerActivity_MembersInjector.injectTranslationsDBAdapter(
          instance, DaggerApplicationComponent.this.translationsDBAdapterProvider.get());
      PagerActivity_MembersInjector.injectQuranAppUtils(instance, quranAppUtilsProvider.get());
      PagerActivity_MembersInjector.injectShareUtil(instance, shareUtilProvider.get());
      PagerActivity_MembersInjector.injectAudioUtils(
          instance, DaggerApplicationComponent.this.audioUtilsProvider.get());
      PagerActivity_MembersInjector.injectQuranInfo(
          instance, DaggerApplicationComponent.this.getQuranInfo());
      PagerActivity_MembersInjector.injectQuranFileUtils(
          instance, DaggerApplicationComponent.this.getQuranFileUtils());
      return instance;
    }

    private AyahTranslationFragment injectAyahTranslationFragment(
        AyahTranslationFragment instance) {
      AyahTranslationFragment_MembersInjector.injectQuranInfo(
          instance, DaggerApplicationComponent.this.getQuranInfo());
      AyahTranslationFragment_MembersInjector.injectQuranSettings(
          instance, DaggerApplicationComponent.this.provideQuranSettingsProvider.get());
      AyahTranslationFragment_MembersInjector.injectTranslationPresenter(
          instance, getInlineTranslationPresenter());
      return instance;
    }

    private final class QuranPageComponentBuilder implements QuranPageComponent.Builder {
      private com.quran.labs.androidquran.module.fragment.QuranPageModule quranPageModule;

      @Override
      public QuranPageComponent build() {
        if (quranPageModule == null) {
          throw new IllegalStateException(
              com.quran.labs.androidquran.module.fragment.QuranPageModule.class.getCanonicalName()
                  + " must be set");
        }
        return new QuranPageComponentImpl(this);
      }

      @Override
      public QuranPageComponentBuilder withQuranPageModule(
          com.quran.labs.androidquran.module.fragment.QuranPageModule quranPageModule) {
        this.quranPageModule = Preconditions.checkNotNull(quranPageModule);
        return this;
      }
    }

    private final class QuranPageComponentImpl implements QuranPageComponent {
      private QuranPageModule_ProvidePagesFactory providePagesProvider;

      private Provider<QuranPagePresenter> quranPagePresenterProvider;

      private Provider<AyahTrackerPresenter> ayahTrackerPresenterProvider;

      private Provider<TranslationPresenter> translationPresenterProvider;

      private QuranPageComponentImpl(QuranPageComponentBuilder builder) {
        initialize(builder);
      }

      private Set<ImageDrawHelper> getSetOfImageDrawHelper() {
        return SetBuilder.<ImageDrawHelper>newSetBuilder(1)
            .addAll(QuranPageModule_ProvideImageDrawHelpersFactory.proxyProvideImageDrawHelpers())
            .build();
      }

      @SuppressWarnings("unchecked")
      private void initialize(final QuranPageComponentBuilder builder) {
        this.providePagesProvider =
            QuranPageModule_ProvidePagesFactory.create(builder.quranPageModule);
        this.quranPagePresenterProvider =
            DoubleCheck.provider(
                QuranPagePresenter_Factory.create(
                    DaggerApplicationComponent.this.bookmarkModelProvider,
                    PagerActivityComponentImpl.this.coordinatesModelProvider,
                    DaggerApplicationComponent.this.provideQuranSettingsProvider,
                    PagerActivityComponentImpl.this.quranPageWorkerProvider,
                    providePagesProvider));
        this.ayahTrackerPresenterProvider =
            DoubleCheck.provider(
                AyahTrackerPresenter_Factory.create(
                    DaggerApplicationComponent.this.quranInfoProvider,
                    DaggerApplicationComponent.this.quranFileUtilsProvider));
        this.translationPresenterProvider =
            DoubleCheck.provider(
                TranslationPresenter_Factory.create(
                    PagerActivityComponentImpl.this.translationModelProvider,
                    DaggerApplicationComponent.this.provideQuranSettingsProvider,
                    DaggerApplicationComponent.this.translationsDBAdapterProvider,
                    PagerActivityComponentImpl.this.shareUtilProvider,
                    DaggerApplicationComponent.this.quranInfoProvider,
                    providePagesProvider));
      }

      @Override
      public void inject(QuranPageFragment quranPageFragment) {
        injectQuranPageFragment(quranPageFragment);
      }

      @Override
      public void inject(TabletFragment tabletFragment) {
        injectTabletFragment(tabletFragment);
      }

      @Override
      public void inject(TranslationFragment translationFragment) {
        injectTranslationFragment(translationFragment);
      }

      private QuranPageFragment injectQuranPageFragment(QuranPageFragment instance) {
        QuranPageFragment_MembersInjector.injectQuranInfo(
            instance, DaggerApplicationComponent.this.getQuranInfo());
        QuranPageFragment_MembersInjector.injectQuranSettings(
            instance, DaggerApplicationComponent.this.provideQuranSettingsProvider.get());
        QuranPageFragment_MembersInjector.injectQuranPagePresenter(
            instance, quranPagePresenterProvider.get());
        QuranPageFragment_MembersInjector.injectAyahTrackerPresenter(
            instance, ayahTrackerPresenterProvider.get());
        QuranPageFragment_MembersInjector.injectAyahSelectedListener(
            instance,
            PagerActivityModule_ProvideAyahSelectedListenerFactory.proxyProvideAyahSelectedListener(
                PagerActivityComponentImpl.this.pagerActivityModule));
        QuranPageFragment_MembersInjector.injectQuranScreenInfo(
            instance, DaggerApplicationComponent.this.getQuranScreenInfo());
        QuranPageFragment_MembersInjector.injectImageDrawHelpers(
            instance, getSetOfImageDrawHelper());
        return instance;
      }

      private TabletFragment injectTabletFragment(TabletFragment instance) {
        TabletFragment_MembersInjector.injectQuranSettings(
            instance, DaggerApplicationComponent.this.provideQuranSettingsProvider.get());
        TabletFragment_MembersInjector.injectAyahTrackerPresenter(
            instance, ayahTrackerPresenterProvider.get());
        TabletFragment_MembersInjector.injectQuranPagePresenter(
            instance, DoubleCheck.lazy(quranPagePresenterProvider));
        TabletFragment_MembersInjector.injectTranslationPresenter(
            instance, DoubleCheck.lazy(translationPresenterProvider));
        TabletFragment_MembersInjector.injectAyahSelectedListener(
            instance,
            PagerActivityModule_ProvideAyahSelectedListenerFactory.proxyProvideAyahSelectedListener(
                PagerActivityComponentImpl.this.pagerActivityModule));
        TabletFragment_MembersInjector.injectQuranScreenInfo(
            instance, DaggerApplicationComponent.this.getQuranScreenInfo());
        TabletFragment_MembersInjector.injectQuranInfo(
            instance, DaggerApplicationComponent.this.getQuranInfo());
        TabletFragment_MembersInjector.injectImageDrawHelpers(instance, getSetOfImageDrawHelper());
        return instance;
      }

      private TranslationFragment injectTranslationFragment(TranslationFragment instance) {
        TranslationFragment_MembersInjector.injectQuranInfo(
            instance, DaggerApplicationComponent.this.getQuranInfo());
        TranslationFragment_MembersInjector.injectQuranSettings(
            instance, DaggerApplicationComponent.this.provideQuranSettingsProvider.get());
        TranslationFragment_MembersInjector.injectPresenter(
            instance, translationPresenterProvider.get());
        TranslationFragment_MembersInjector.injectAyahTrackerPresenter(
            instance, ayahTrackerPresenterProvider.get());
        return instance;
      }
    }
  }
}
